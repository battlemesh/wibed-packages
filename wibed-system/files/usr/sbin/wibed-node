#!/usr/bin/lua

io = require("io")
fs = require("nixio.fs")
http = require("socket.http")
ltn12 = require("ltn12")
json = require ("dkjson")
libuci = require ("uci")
cURL = require("cURL")

RESULTS_DIR = "/root/results"
COMMANDS_PIPE = "/var/run/command-executer.sock"
OVERLAY_DIR = "/overlay"
MNT_USB_OVERLAY = "/tmp/usb-overlay"
MNT_FLASH_OVERLAY = "/tmp/flash-overlay"
REBOOT_DELAY = 60
SAVE_DIR = "/save"


-- Status
INIT = 0
IDLE = 1
PREPARING = 2
READY = 3
DEPLOYING = 4
RUNNING = 5
RESETTING = 6
UPGRADING = 7
ERROR = 8


-- Overlay
NO = 0
FLASH = 1
USB = 2


-- Create python-like string formatting
--
-- Example:
-- "Hello %s" % name
getmetatable("").__mod = function(a, b)
    if not b then
        return a
    elseif type(b) == "table" then
        return string.format(a, unpack(b))
    else
        return string.format(a, b)
    end
end

-- Function: string:split
--
-- For splitting a string using a certain separator.
--
-- Params:
-- * sep - The separator to use for the splitting.
--
-- Returns:
-- * Table containing the splitted components.
function string:split(sep)
    local sep, fields = sep or ":", {}
    local pattern = string.format("([^%s]+)", sep)
    self:gsub(pattern, function(c) fields[#fields+1] = c end)
    return fields
end

-- Function: string:trim
--
-- Trim whitespace around a string
function string:trim()
    return self:find'^%s*$' and '' or self:match'^%s*(.*%S)'
end

-- Function: fileExists
--
-- Checks if the specified file exists.
--
-- Params:
-- * filePath - The path of the file to check.
--
-- Returns:
-- * True if the file eixsts, false otherwise.
function fileExists(filePath)
    return fs.stat(filePath) ~= nil
end

-- Function: pipeExists
--
-- Checks if the specified pipe exists.
--
-- Params:
-- * pipePath - The path of the pipe to check.
--
-- Returns:
-- * True if the pipe exists, false otherwise.
function pipeExists(pipePath)
    return fs.stat(pipePath) ~= nil
end

-- Function: folderExists
--
-- Checks if the specified folder exists.
--
-- Params:
-- * folderPath - The path of the folder to check.
--
-- Returns:
-- * True if the folder exists, false otherwise
function folderExists(folderPath)
    return fs.stat(folderPath) ~= nil
end

-- Function: readFile
--
-- Reads the entire contents of a file.
--
-- Params:
-- * filePath - The path to the file to read.
--
-- Returns:
-- * fileContents - The contents of the file
function readFile(filePath)
    local file = io.open(filePath, "rb")
    local content = nil

    if file then
        content = file:read("*all")
        file:close()

        if content then
            content = content:trim()
        end
    end

    return content
end

-- Function: writeFile
--
-- Writes the provided content to the specified file.
--
-- Params:
-- * filePath - The path to the file to write.
-- * content - The content to write.
function writeFile(filePath, content)
    if not content then
        content = ""
    end
    local file = assert(io.open(filePath, "w"))
    assert(file:write(content))
    file:close()
end

-- Function: executeCommand
--
-- Executes a shell command returning the status code
-- and stdout.
--
-- Params:
-- * command - The command to execute.
-- * captureStdout - Whether or not to capture stdout.
--
-- Returns:
-- * exitCode - The exit code of the command.
-- * stdout - The standard output of the command (if captureStdout = true).
function executeCommand(command, captureStdout)
    if captureStdout == nil then
        captureStdout = true
    end

    if captureStdout then
        local stdoutFilePath = os.tmpname()

        local exitCode = os.execute(string.format("%s > %s", command, stdoutFilePath))
        local stdout = readFile(stdoutFilePath)
        os.remove(stdoutFilePath)

        return exitCode, stdout
    else
        return os.execute(string.format("%s",command))
    end
end

-- Function: commandExists
--
-- Checks if the specified command exists in the system.
--
-- Params:
-- * command - The command to check.
--
-- Returns:
-- * 0 - If the command exists, 1 - otherwise.
function commandExists(command)
    local exitCode, stdout = executeCommand(string.format("type \"%s\" &> /dev/null",command))

    return exitCode == 0
end


-- Function: readVariable
--
-- Read variable from UCI or config files depending on
-- environment.
--
-- Params:
-- * variableName - The name of the variable to load.
--
-- Returns:
-- * Value read.
function readVariable(variableName)
    local readValue = nil

    if UCI then
        local section, option = unpack(variableName:split("."))
        local uci = libuci:cursor()
        readValue = uci:get(UCI_CONFIG, section, option)
    else
        filePath=string.format("%s/%s",CONFIG_DIR, variableName)
        readValue = readFile(filePath)
    end

    return readValue
end

-- Function: writeVariable
--
-- Write variable to UCI or config files depending on
-- environment.
--
-- Params:
-- * variableName - The name of the variable to write.
-- * value - Value to write.
function writeVariable(variableName, value)
    if UCI then
        local section, option = unpack(variableName:split("."))
        uciSetInOverlays(UCI_CONFIG, section, option, value, "both")
    else
        writeFile(string.format("%s/%s",CONFIG_DIR, variableName), value)
    end
end


-- Declare configuration manner
if commandExists("uci") then
    -- Using UCI
    UCI = true
    UCI_CONFIG = "wibed"
else
    -- Using config files
    UCI = false
    CONFIG_DIR="config"

    if not folderExists(CONFIG_DIR) then
        fs.mkdirr(CONFIG_DIR)
    end
end



-- Function: uciSetInOverlays
--
-- Write variable to the UCI database in flash and in the usb stick.
--
-- Params:
-- * config - Which config file to use.
-- * section - Which uci section.
-- * option - Which uci option.
-- * value - Value to write.
-- * overlay - Which overlay to write, options can be "both", "USB", "FLASH"
function uciSetInOverlays(config, section, option, value, overlay)

    local overlays = {}
    if overlay == "both" then
        overlays = {"/", MNT_USB_OVERLAY, MNT_FLASH_OVERLAY}
    elseif overlay == "USB" then
        if mountedOverlay == USB then
            overlays = {"/"}
        else
            overlays = {MNT_USB_OVERLAY}
        end
    elseif overlay == "FLASH" then
        if mountedOverlay == FLASH then
            overlays = {"/"}
        else
            overlays = {MNT_FLASH_OVERLAY}
        end
    else
        print("Something went terribly wrong")
        os.exit(1)
    end
    
    for _, dir in ipairs(overlays) do
        local confdir = dir .. "/etc/config"
        local savedir = "/tmp/.uci/" .. dir
        if folderExists(confdir) then
            if not folderExists(savedir) then fs.mkdirr(savedir) end
            local uci = libuci:cursor()
            uci:set_confdir(confdir)
            uci:set_savedir(savedir)
            uci:set(config, section, option, value)
            uci:save(config)
            uci:commit(config)
        end
    end
end

-- Function: getOverlay
-- --
-- -- Write variable to the UCI database in flash and in the usb stick.
-- --
-- -- Returns: if and which overlay exists
function getOverlay()

    _, overlay  = executeCommand(string.format("mount | grep \" /overlay\" | cut -d\" \" -f5"))
    if overlay == "" then
        print(string.format("No overlay"))
        return NO
    elseif overlay == "jffs2" then
        print(string.format("Flash is the overlay"))
        return FLASH
    elseif overlay == "ext4" then
        print(string.format("USB is the overlay"))
        return USB
    else
        print(string.format("Error executing mount!"))
        os.exit(1)
    end
end




-- Function: buildResults
--
-- Builds a trable containing information about all non-acknowledged
-- results.
--
-- Returns:
-- * Table with information about non-acked results.
function buildResults()
    local results = {}
    local resultAck = resultAck or 0

    if not folderExists(RESULTS_DIR) then
        return results
    end

    local _, commandIdsStr = executeCommand(string.format("ls -1 \"%s\"",RESULTS_DIR))
    local commandIds = commandIdsStr:split("\n")

    if not commandIds then
        return
    end

    for _, commandId in ipairs(commandIds) do
        commandId = tonumber(commandId)

        cmdResultFolder=string.format("%s/%s",RESULTS_DIR, commandId)

        if commandId > resultAck then
            if not fileExists(string.format("%s/exitCode", cmdResultFolder)) then
                break
            end

            exitCode = readFile(string.format("%s/exitCode", cmdResultFolder))
            stdout = readFile(string.format("%s/stdout", cmdResultFolder))
            stderr = readFile(string.format("%s/stderr",cmdResultFolder))

            results[tostring(commandId)] = {exitCode, stdout, stderr}
        end
    end

    return results
end

-- Function: sendError
--
-- Send error info to the server 
function sendError()
    -- Create tar.gz file from the result files 
    _, exp = executeCommand(string.format("wibed-getlogs"))
    -- Transfer tar.gz file to the server and then delete it
    local c = cURL.easy_init()
    local api = readVariable("general.api_url")
    local nodeId = readVariable("general.node_id")
    local url = string.format("%sapi/error/%s",api,nodeId)
    print("The error url is: "..url)
    c:setopt_url(url)
    local filePath=string.format("/root/error.tar.gz")
    print("Sending to server file: "..filePath)
    local postdata = {
	file = {file=filePath,
		type="text/plain"}}
    c:post(postdata)
    c:perform()
    fs.remove(filePath)
end

-- Function: doPrepareFirmwareUpgrade
--
-- Prepare the firmware upgrade process.
--
-- Params:
-- * version - New firmware version.
-- * hash - The hash of the new firmware.
-- * upgradeTime - The time at which to make the upgrade.
function doPrepareFirmwareUpgrade(version, hash, upgradeTime) 
    print(string.format("Fetching firmware upgrade at %s", upgradeTime))
    success, statusCode, _, _ = http.request{ 
        url = string.format("%s/static/firmwares/%s",apiUrl, version), 
        sink = ltn12.sink.file(io.open("/tmp/wibed.bin", 'w'))
    }

    if success and statusCode == 200 then
	    status = UPGRADING
            writeFile("/root/wibed.upgrade.lasthash",hash)
            writeFile("/root/wibed.upgrade.version",version)
	    print(string.format("Start UPGRADING process in the next wibed-node call"))
    else
        print(string.format("Downloading of firmware failed: %s", statusCode))
        status = ERROR
	sendError()
    end
end


-- Function: doFirmwareUpgrade
--
-- Start the firmware upgrade process.
--
function doFirmwareUpgrade() 
	print(string.format("Attempting firmware upgrade"))
	local oldVersion = readVariable("upgrade.version") or nil
	local upVersion = readFile("/root/wibed.upgrade.version") or nil
	local hash = readFile("/root/wibed.upgrade.lasthash") or nil

	if hash == nil or #hash < 8 then
		status = ERROR
		print(string.format("Failed to upgrade to version %s, hash file does not exist", upVersion))
		sendError()
		return 1
	end
	
	-- Execute the upgrade script
	print(string.format("Executing the upgrade script"))
	local exitCode, _ = executeCommand(string.format("/usr/sbin/wibed-upgrade %s %s" , upVersion, hash ))

	if exitCode ~= "0" then
		status = IDLE
		writeVariable("general.status", status)
		print(string.format("Failed to upgrade to version %s, going back to IDLE state", upVersion))
		return 1
	end
end

-- Function: doPrepareExperiment
--
-- Prepares an experiment by downloading the respective overlay and 
-- installing it.
--
-- Params:
-- * experimentId - The id of the experiment.
-- * overlayId - The id of the overlay used in the experiment.
-- * overlayHash - The hash of the overlay.
function doPrepareExperiment(experimentId, overlayId, overlayHash) 
    status = PREPARING
    writeVariable("general.status", status)

    executeCommand(string.format("rm -rf %s/*", MNT_USB_OVERLAY))

    success, statusCode, _, _ = http.request{ 
        url = string.format("%s/static/overlays/%s",apiUrl, overlayId), 
        sink = ltn12.sink.file(io.open(string.format("%s/overlay.tar.gz", MNT_USB_OVERLAY), "w"))
    }

    if success and statusCode == 200 then
        executeCommand(string.format("mkdir %s/sbin 2>/dev/null",OVERLAY_DIR))
        executeCommand(string.format("cp -f /rom/sbin/block %s/sbin/block",OVERLAY_DIR))
        executeCommand(string.format("touch /etc/config/fstab"))
        executeCommand(string.format("cp -a %s/* %s/",OVERLAY_DIR, MNT_USB_OVERLAY))
        executeCommand(string.format("rm -f %s/etc/.extroot-uuid 2>/dev/null",MNT_USB_OVERLAY))
        --executeCommand(string.format("rm -rf %s/etc/uci-defaults 2>/dev/null",MNT_USB_OVERLAY))
        executeCommand(string.format("tar -xhzf %s/overlay.tar.gz -C %s",MNT_USB_OVERLAY, MNT_USB_OVERLAY))
		
        status = READY
        writeVariable("general.status", status)
        writeVariable("experiment.exp_id", experimentId)
    else
        -- TODO: Report error
        print("Downloading of overlay failed: " .. statusCode)
        status = ERROR
	sendError()
    end
end

-- Function: doStartExperiment
--
-- Starts the experiment.
function doStartExperiment()
    status = DEPLOYING
    uciSetInOverlays("fstab", "usb_overlay", "target", OVERLAY_DIR, "both")
    -- Change status to flash overlay as DEPLOYING
    uciSetInOverlays("wibed", "general", "status", status, "FLASH")
    -- Change future status to usb overlay as RUNNING
    uciSetInOverlays("wibed", "general", "status", RUNNING, "USB")
    executeCommand(string.format("sleep %d && reboot -f &",REBOOT_DELAY))
end

-- Function: saveResults
--
-- Send the results in /save folder to the server 
function saveResults()
    -- Create tar.gz files from the result files 
    _, exp = executeCommand(string.format("ID=`uci get wibed.experiment.exp_id` && tar -cvzf /root/${ID}.tar.gz -C /save/ . &&  rm -rf /save/* && echo $ID"))
    -- Transfer tar.gz file to the server and then delete it
    local c = cURL.easy_init()
    local saveUrl = readVariable("experiment.save_url")
    local nodeId = readVariable("general.node_id")
    local url = string.format("%s/%s",saveUrl,nodeId)
    print("The results url is: "..url)
    c:setopt_url(url)
    local filePath=string.format("%s/%s.%s","/root", exp,"tar.gz")
    print("Sending to server file: "..filePath)
    local postdata = {
	file = {file=filePath,
		type="text/plain"}}
    c:post(postdata)
    c:perform()
    fs.remove(filePath)
end

-- Function: doFinishExperiment
--
-- Finishes an active experiment.
function doFinishExperiment()

    if mountedOverlay == USB then
        uciSetInOverlays("fstab", "usb_overlay", "target", MNT_USB_OVERLAY, "both")
        executeCommand(string.format("echo \"-1 exit\" > \"%s\"",COMMANDS_PIPE), false)

        status = RESETTING
        -- Change status to usb overlay as RESETTING
        uciSetInOverlays("wibed", "general", "status", status, "USB")
        -- Change  future status to flash overlay as IDLE
        uciSetInOverlays("wibed", "general", "status", IDLE, "FLASH")
    
        saveResults()
    
        executeCommand(string.format("sleep %d && reboot -f &", REBOOT_DELAY))

    else
        -- Assuming that no error happened and the experiment
        -- was finished before even running
        status = IDLE
    end

end

-- Function: executeCommands
--
-- Sets up the commands provided as argument for execution.
--
-- Args:
-- * commands - Table of commands {<id1>=<cmd1>, <id2>=<cmd2>}
function executeCommands(commands)
    if not commands then
        return
    end

    local lastCommandId=commandAck
    local sanitizedCommands = {}

    for commandId, commandStr in pairs(commands) do
        table.insert(sanitizedCommands, {tonumber(commandId), commandStr})
    end
    table.sort(sanitizedCommands, function (a,b) return b[1] < a[1] end)

    for _ , pair in ipairs(sanitizedCommands) do
        commandId, commandStr = unpack(pair)
        print(commandId)
        print(commandStr)
        commandId = tonumber(commandId)

        if not pipeExists(COMMANDS_PIPE) then
            executeCommand("command-executer &")
            -- Give some time for named pipe to be created by executer
            executeCommand("sleep 1")
        end

        print(string.format("Executing command %d \"%s\"", commandId, commandStr))
        --This doesn't work so we have to hack a lil bit
        --writeFile(COMMANDS_PIPE, "%d %s" % {commandId, commandStr})
        exitCode,stdout = executeCommand(string.format("echo \"%d %s\" > \"%s\"", commandId, commandStr, COMMANDS_PIPE), false)
        print(exitCode)
        print(stdout)
        lastCommandId = commandId
    end

    writeVariable("general.commandAck", lastCommandId)
end

-- Function: getGwMgmtAddress()
--
-- Get the ipv6 address of the mgmt
-- network gateway
--
function getGwMgmtAddress()
	local _, gw = executeCommand(string.format("batctl gwl | grep '=>' | awk ' {print $2}'"))
	return gw
end

-- Function: getMgmtAddress()
--
-- returns node's MAC address for mgmt0 interface
--

function getMgmtAddress()
	local _, mymac = executeCommand(string.format("cat /sys/class/net/mgmt0/address"))
	return mymac
end

-- Function: sendRestore
-- 
-- Sends restore command to the specified nodeid through alfred
-- may be a simple reboot or reset with commands preexecution (if in experiment)
-- Parameters: nodeid (id of the node to restore); reset (signal to reexecute previous commands)

function sendRestore(nodeid, reset)
        if nodeid ~=nil then
                executeCommand(string.format("uci set wibed.temp=wibed; uci set wibed.temp.gwack='1'; uci commit"))
                if reset == true then
                        executeCommand(string.format("/usr/sbin/wibed-restore gw %s full", nodeid))
                elseif reset == false then
                        executeCommand(string.format("/usr/sbin/wibed-restore gw %s", nodeid))
                else
                        print(string.format("Invalid reset argument. Expecting True or False. Got something diferent"))
                end
        end
end

apiUrl = assert(readVariable("general.api_url"), "API URL not defined")
print(string.format("API URL: %s", apiUrl))
id = assert(readVariable("general.node_id"), "Node ID not defined")
print(string.format("Id: %s", id))
status = tonumber(readVariable("general.status")) or INIT
print(string.format("Status: %d", status))
model = readVariable("upgrade.model")
print(string.format("Model: %s", model))
version = readVariable("upgrade.version")
print(string.format("Version: %s", version))
experimentId = readVariable("experiment.exp_id")
print(string.format(string.format("Experiment Id: %s", (experimentId or "None"))))
commandAck = tonumber(readVariable("general.commandAck"))
print(string.format("Command Ack: %s", (commandAck or "None")))
resultAck = tonumber(readVariable("general.resultAck"))
print(string.format("Result Ack: %s", (resultAck or "None")))
mountedOverlay = tonumber(getOverlay())
--print(string.format("The overlay used is: %s", mountedOverlay))
coordx = readVariable("general.coordx")
coordy = readVariable("general.coordy")
coordz = readVariable("general.coordz")
testbed = readVariable("location.testbed")
is_gw = readVariable("management.is_gw")
gw_mgmt_address= getGwMgmtAddress()
mgmt_address = getMgmtAddress()

request = {}

request["status"] = status

if status == INIT then

    -- Check the version (prevent to send a wrong version when failed to upgrade the firmware)
    local _, tailfirmv = executeCommand("tail -n 1 /etc/wibed.version",true)
    local firmv = string.sub(tailfirmv, 1, 8)

    if version ~= firmv then
        writeVariable("upgrade.version", firmv)
        version = firmv
    end

    request["model"] = model
    request["version"] = version
    request["coordx"] = coordx
    request["coordy"] = coordy
    request["coordz"] = coordz
    request["testbed"] = testbed
    request["gateway"] = is_gw
    request["gwaddress"] = gw_mgmt_address
    request["address"] = mgmt_address

elseif status == IDLE or status == RUNNING or status == ERROR then
    if commandAck then
        request["results"] = buildResults()
        request["commandAck"] = commandAck
    end
    
    -- Sending gateway & node ACK to the server (for sendRestore process)
    --
    local _, gwack = executeCommand(string.format("uci get wibed.temp.gwack -q"))
    local _, nodeack = executeCommand(string.format("uci get wibed.temp.nodeack -q"))
    if gwack == "1" then
       request["sendRestore"] = "GWACK"
       executeCommand(string.format("uci set wibed.temp.gwack='0'; uci commit"))
    end
    if nodeack == "1" then
       request["sendRestore"] = "NODEACK"
       executeCommand(string.format("uci set wibed.temp.nodeack='0'; uci commit"))
    end

end

jsonEncodedRequest = json.encode(request, {indent = true})

print(" ")
print("Request:")
print(jsonEncodedRequest)
print(" ")
    

responseBody, statusCode, _, _ = http.request( 
    string.format("%s/api/wibednode/%s", apiUrl, id), 
    jsonEncodedRequest)

if responseBody and statusCode == 200 then
    print("Communication with server successful")
    print(" ")
    print(responseBody)

    response, pos, err = json.decode(responseBody)

    if err then
        print(string.format("Error parsing json: %s", err))
        os.exit(1)
    elseif response["errors"] then
        print("Error sent by server:")
        for key, value in pairs(response["errors"]) do print(key, value) end
        os.exit(1)
    end

    -- Migration from init to idle is automatic upon receival of 
    -- response by server
    if status == INIT then
        -- Except the case that an upgrade was performed incorrectly
        local upgrade = response["upgrade"]
        if upgrade then
            print(string.format("There was an error upgrading."))
            print(string.format("Upgrade version and node version do not match"))
            status = ERROR
	    sendError()
        end
        status = IDLE
    end

--if status == RESETTING then
--    local error, stdout = executeCommand(string.format("ps | grep reboot -c"), true)
--    local st = tonumber(stdout)
--   if st <= 2 then
--        status = IDLE
--        writeVariable("general.status", status)
--        executeCommand(string.format("sleep %d && reboot -f &", REBOOT_DELAY))
--    end
--end



    -- If IDLE
    if status == IDLE then
        local reinit = response["reinit"]
    	if reinit then
		    print("Doing REINIT")
    		executeCommand(string.format("/usr/sbin/wibed-reset"))
        	os.exit(0)
        end
        local upgrade = response["upgrade"]
        local experiment = response["experiment"]
        if upgrade then
            doPrepareFirmwareUpgrade(upgrade["version"], 
                              upgrade["hash"],
                              upgrade["utime"])
        elseif experiment and experiment["action"] == "PREPARE" then
            doPrepareExperiment(experiment["id"],
                                experiment["overlay"],
                                experiment["hash"])
        end

        -- Processing request to restore the specified node
        --
        local sendrestore = response["sendRestore"]
        if sendrestore then
            sendRestore(sendrestore["dest"],sendrestore["reset"])
        end

    elseif response["experiment"] and status >= PREPARING 
                                  and status <= RUNNING then
        if response["experiment"]["action"] == "FINISH" then
            doFinishExperiment()
        elseif response["experiment"]["action"] == "RUN" and
               status == READY then
            doStartExperiment()
        end
    elseif status == UPGRADING then
        print(string.format("Have to upgrade"))
        doFirmwareUpgrade()
    end

    if status == IDLE or status == RUNNING or status == ERROR then
        executeCommands(response["commands"])
    end

    local resultAck = response["resultAck"]
    if resultAck then
        writeVariable("general.resultAck", resultAck)
    end

    -- Write any changes that maybe took place upon the response only in the current overlay
    -- writeVariable("general.status", status)
    if mountedOverlay == FLASH then
        uciSetInOverlays("wibed", "general", "status", status, "FLASH")
    else 
        uciSetInOverlays("wibed", "general", "status", status, "USB")
    end

else
    print(string.format("Communication with server unsuccessful: %s", statusCode))
end
